---
# setup-primary.yml
# This is playbook configures the primary PostgreSQL server.

# Configure the PostgreSQL primary server.
- name: Configure PostgreSQL primary server
  hosts: PRIMARY
  become: true
  gather_facts: yes
  tasks:

    # Load variables inside conf.yml file.
    - name: Load common variables
      include_vars:
        file: ../../conf.yml

    # Load variables inside vault.yml file.
    - name: Load vault variables
      include_vars:
        file: ../../vault.yml

    # Setup PGDG repository using setup-pgdg-repo.yml task.
    - name: Setup pgdg repo
      include_tasks: ../tasks/setup-pgdg-repo.yml

    # Install the specified PostgreSQL version.
    - name: Install PostgreSQL-{{ PG_VERSION }}
      package:
        name: "{{ 'postgresql' + (('-' + PG_VERSION | string) if ansible_facts['os_family'] == 'Debian' else PG_VERSION | string + '-server') }}"
        state: present

    # Create data directory for primary PostgreSQL server.
    - name: Creating data directory
      become_user: postgres
      file:
        path: "{{ INITDB_PATH }}"
        state: directory

    # Stop the primary PostgreSQL server if it is already running.
    - name: Stop already running service
      shell: service postgresql stop
      when: ansible_facts['os_family'] == 'Debian'

    # Install the required python3 and psycopg2 packages.
    - name: Installing python3-psycopg2
      package:
        name:
          - python3-psycopg2
        state: present
    
    # Create .pfile with permission 0600 to store PSQL_SERVER_PASSWORD value from vault.yml.
    - name: Creating password file
      become_user: postgres
      copy:
        dest: "~/.pfile"
        mode: 0600
        content: "{{ PSQL_SERVER_PASSWORD }}"      

    # Check if data directory is empty.
    - name: Check if the data directory is empty
      find:
        paths: "{{ INITDB_PATH }}"
        file_type: directory
        patterns: "*"
      register: DIR_CONTENTS

    # Display error message if data directory is not empty.
    - name: Display message and exit if the data directory is not empty
      fail:
        msg: "The data directory '{{ INITDB_PATH }}' is not empty."
      when: DIR_CONTENTS.files | length > 0

    # Initialize the data directory for the Primary PostgreSQL server.
    - name: Initialize the data directory for the Primary PostgreSQL server
      become_user: postgres
      shell: >
        {{ (ansible_facts['os_family'] == 'RedHat') | ternary(
          '/usr/pgsql-' + PG_VERSION | string + '/bin/initdb',
          '/usr/lib/postgresql/' + PG_VERSION | string + '/bin/initdb'
        ) }} -D {{ INITDB_PATH }} --pwfile ~/.pfile --encoding=utf-8 -A scram-sha-256

    - name: Append PostgreSQL Configuration
      become_user: postgres
      lineinfile:
        path: "{{ INITDB_PATH }}/postgresql.conf"
        line: "{{ item }}"
        insertafter: EOF
        create: yes
      with_items:
        - "listen_addresses = '*'"  # listen_addresses is set to listen on all IP addresses.
        - "wal_level = replica"  # wal_level is set to replica.
        - "max_wal_senders = 10"  # max_wal_senders is set to 10.
        - "wal_keep_size = 1GB"  # wal_keep_size is set to 1GB.

    # Start the Primary PostgreSQL server.
    - name: Start the server
      become_user: postgres
      shell: >
        {{ (ansible_facts['os_family'] == 'RedHat') | ternary(
          '/usr/pgsql-' + PG_VERSION | string + '/bin/pg_ctl',
          '/usr/lib/postgresql/' + PG_VERSION | string + '/bin/pg_ctl'
        ) }} -D {{ INITDB_PATH }} start -o "-p {{ PG_PORT }}"

    # Create replication slots.
    - name: Creating a replication slots
      postgresql_query:
        login_user: postgres
        login_password: "{{ PSQL_SERVER_PASSWORD }}"
        port: "{{ PG_PORT }}"
        query: "SELECT pg_create_physical_replication_slot('{{ item.PG_REPLICATION_SLOT }}');"
      loop: "{{ STANDBY_SERVERS }}"

    # Create a replication user.
    - name: Creating a replication user
      postgresql_query:
        login_user: postgres
        login_password: "{{ PSQL_SERVER_PASSWORD }}"
        port: "{{ PG_PORT }}"
        query: "create user repuser with password '{{ REPUSER_PASSWORD }}' replication;"

    # Update the pg_hba.conf file for replication access. 
    # Access to the PostgreSQL server from any IP address within the CLUSTER_SUBNET allowed only using PSQL_SERVER_PASSWORD.
    - name: Update pg_hba.conf
      become_user: postgres
      lineinfile:
        path: "{{ INITDB_PATH }}/pg_hba.conf"
        line: |
          host    replication     repuser     {{ CLUSTER_SUBNET }}       scram-sha-256
          host    all             all         {{ CLUSTER_SUBNET }}       scram-sha-256
        insertafter: EOF

    # Restart the primary PostgreSQL server
    - name: Restart the server
      become_user: postgres
      shell: >
        {{ (ansible_facts['os_family'] == 'RedHat') | ternary(
          '/usr/pgsql-' + PG_VERSION | string + '/bin/pg_ctl',
          '/usr/lib/postgresql/' + PG_VERSION | string + '/bin/pg_ctl'
        ) }} -D {{ INITDB_PATH }} restart -o "-p {{ PG_PORT }}"

    # Install pgpool using apt
    - name: Install pgpool2
      package:
        name: pgpool2
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install pgpool-II release RPM
      dnf:
        disable_gpg_check: True
        name: https://www.pgpool.net/yum/rpms/4.5/redhat/rhel-9-x86_64/pgpool-II-release-4.5-1.noarch.rpm
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Install pgpool-II for the specified PostgreSQL version on RHEL
      dnf:
        name: pgpool-II-pg{{ PG_VERSION }}
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    # Change owner, group and permissions of pcp.conf file
    - name: Change permissions, owner, and group of the pcp.conf file
      file:
        path: "{{ '/etc/pgpool-II/pcp.conf' if ansible_facts['os_family'] == 'RedHat' else '/etc/pgpool2/pcp.conf' }}"
        #path: /etc/pgpool2/pcp.conf
        owner: postgres  # Set the owner to postgres
        group: postgres  # Set the group to postgres
        mode: "0600"  # Set the permissions to 0600

    # Add postgres user and PSQL_SERVER_PASSWORD to pcp.conf file
    - name: Add user and password to pcp.conf
      command: >
        sh -c "echo 'postgres:'$(pg_md5 {{ PSQL_SERVER_PASSWORD }}) >> {{ '/etc/pgpool-II/pcp.conf' if ansible_facts['os_family'] == 'RedHat' else '/etc/pgpool2/pcp.conf' }}"

    # Stop pgpool2 service on primary node.
    - name: Stopping pgpool2 service
      service:
        name: "{{ 'pgpool' if ansible_facts['os_family'] == 'RedHat' else 'pgpool2' }}"
        state: stopped

    # Create a .pcppass file.
    - name: Creating pcppass file
      become_user: postgres
      copy:
        dest: "~/.pcppass"
        mode: 0600
        content: |
          localhost:9898:postgres:{{ PSQL_SERVER_PASSWORD }}
          {{ hostvars['PRIMARY']['ansible_host'] }}:9898:postgres:{{ PSQL_SERVER_PASSWORD }}
          {% for STANDBYS in groups['STANDBY'] %}
          {{ hostvars[STANDBYS]['ansible_host'] }}:9898:postgres:{{ PSQL_SERVER_PASSWORD }}
          {% endfor %}

    # Create a .pgpass file to store psql and repuser password in PSQL_SERVER_PASSWORD and REPUSER_PASSWORD variables inside vault.yml.
    - name: Creating .pgpass file
      become_user: postgres
      copy:
        dest: "~/.pgpass"
        mode: 0600
        content: |
          localhost:{{ PG_PORT }}:postgres:postgres:{{ PSQL_SERVER_PASSWORD }}
          {{ hostvars['PRIMARY']['ansible_host'] }}:{{ PG_PORT }}:*:repuser:{{ REPUSER_PASSWORD }}
          {% for STANDBYS in groups['STANDBY'] %}
          {{ hostvars[STANDBYS]['ansible_host'] }}:{{ PG_PORT }}:*:repuser:{{ REPUSER_PASSWORD }}
          {% endfor %}
