---
# setup-primary.yml
# This is playbook configures the primary PostgreSQL server.

# Configure the PostgreSQL primary server.
- name: Configure PostgreSQL primary server
  hosts: PRIMARY
  become: true
  tasks:

    # Load variables inside conf.yml file
    - name: Load common variables
      include_vars:
        file: ../../conf.yml

    # Load variables inside vault.yml
    - name: Load vault variables
      include_vars:
        file: ../../vault.yml

    # Setup PGDG repository using setup-pgdg-repo.yml task
    - name: Setup pgdg repo
      include_tasks: ../tasks/setup-pgdg-repo.yml

    # Install the specified PostgreSQL version
    - name: Install PostgreSQL-{{ PG_VERSION }}
      apt:
        name: "{{ 'postgresql-' + PG_VERSION | string }}"
        state: present

    # Create data directory for primary PostgreSQL server.
    - name: Creating pg_cirrus directory
      become_user: postgres
      file:
        path: "{{ PG_CIRRUS_INSTALLATION_DIRECTORY }}"
        state: directory

    # Stop the primary PostgreSQL server if it is already running.
    - name: Stop already running service
      shell: service postgresql stop

    # Install the required python3 and psycopg2 packages.
    - name: Installing python3-psycopg2
      apt:
        name:
          - python3-psycopg2
        state: present

    # Create .pfile with permission 0600 to store PFILE_PASSWORD value from vault.yml
    - name: Creating password file
      become_user: postgres
      copy:
        dest: "~/.pfile"
        mode: 0600
        content: "{{ PFILE_PASSWORD }}"

    # Initialize the data directory for the Primary PostgreSQL server
    - name: Initialize the data directory
      become_user: postgres
      shell: /usr/lib/postgresql/{{ PG_VERSION }}/bin/initdb -D {{ PG_CIRRUS_INSTALLATION_DIRECTORY }} --pwfile ~/.pfile --encoding=utf-8 -A scram-sha-256

    # Update the PostgreSQL configuration file postgresql.conf using Ansible's replace module 
    - name: Update postgresql.conf
      become_user: postgres
      replace:
        path: "{{ PG_CIRRUS_INSTALLATION_DIRECTORY }}/postgresql.conf"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      with_items:
        - { regexp: "#listen_addresses = 'localhost'", replace: "listen_addresses = '*'" } # listen_addresses is set to listen on all IP addresses.
        - { regexp: "#wal_level = replica", replace: "wal_level = replica" } # wal_level is set to replica.
        - { regexp: "#max_wal_senders = 10", replace: "max_wal_senders = 10" } # max_wal_senders is set to 10.
        - { regexp: "#wal_keep_size = 0", replace: "wal_keep_size = 1GB" } # wal_keep_size is set to 1GB.

    # Start the Primary PostgreSQL server.
    - name: Start the server
      become_user: postgres
      shell: /usr/lib/postgresql/{{ PG_VERSION }}/bin/pg_ctl -D {{ PG_CIRRUS_INSTALLATION_DIRECTORY }} start

    # Create replication slots.
    - name: Creating a replication slots
      postgresql_query:
        login_user: postgres
        login_password: "{{ PFILE_PASSWORD }}"
        query: "SELECT pg_create_physical_replication_slot('{{ item.PG_REPLICATION_SLOT }}');"
      loop: "{{ STANDBY_SERVERS }}"

    # Create a replication user.
    - name: Creating a replication user
      postgresql_query:
        login_user: postgres
        login_password: "{{ PFILE_PASSWORD }}"
        query: "create user repuser with password '{{ REPUSER_PASSWORD }}' replication;"

    # Update the pg_hba.conf file for replication access. 
    # Unrestricted access to the PostgreSQL server from any IP address within the CLUSTER_SUBNET.
    - name: Update pg_hba.conf
      become_user: postgres
      lineinfile:
        path: "{{ PG_CIRRUS_INSTALLATION_DIRECTORY }}/pg_hba.conf"
        line: |
          host    replication     repuser     {{ CLUSTER_SUBNET }}       trust
          host    all             all         {{ CLUSTER_SUBNET }}       trust
        insertafter: EOF

    # Restart the primary PostgreSQL server
    - name: Restart the server
      become_user: postgres
      shell: /usr/lib/postgresql/{{ PG_VERSION }}/bin/pg_ctl -D {{ PG_CIRRUS_INSTALLATION_DIRECTORY }} restart
