---
- name: Set up PostgreSQL primary node on any Linux distribution
  hosts: primary
  become: yes
  vars:
    # Define package lists for different distributions
    debian_packages:
      - postgresql
      - openssh-server
    redhat_packages:
      - postgresql-server
      - openssh-server

  tasks:
    # Task 1: Update package manager's cache (for Debian-based systems)
    - name: Update apt cache on Debian-based systems
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_facts['distribution'] in ['Ubuntu', 'Debian']
      tags: package_install

    # Task 2: Install necessary packages on Debian-based systems
    - name: Install PostgreSQL and OpenSSH server on Debian-based systems
      ansible.builtin.apt:
        name: "{{ debian_packages }}"
        state: present
      when: ansible_facts['distribution'] in ['Ubuntu', 'Debian']
      tags: package_install

    # Task 3: Install necessary packages on RHEL-based systems
    - name: Install PostgreSQL and OpenSSH server on RHEL-based systems
      ansible.builtin.yum:
        name: "{{ redhat_packages }}"
        state: present
      when: ansible_facts['distribution'] in ['CentOS', 'RedHat', 'Fedora']
      tags: package_install

    # Task 4: Ensure PostgreSQL service is started and enabled (runs for all Linux distros)
    - name: Ensure PostgreSQL service is running
      ansible.builtin.service:
        name: postgresql
        state: started
        enabled: yes
      tags: service_management

    # Task 5: Ensure passwordless sudo for the postgres user
    - name: Configure passwordless sudo for postgres user
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^postgres ALL=\(ALL\) NOPASSWD:ALL'
        line: 'postgres ALL=(ALL) NOPASSWD:ALL'
      tags: sudo_setup

    # Task 6: Check if SSH keys already exist for postgres
    - name: Check if SSH key for postgres exists
      ansible.builtin.stat:
        path: /home/postgres/.ssh/id_rsa
      register: ssh_key_exists
      become_user: postgres
      tags: ssh_key

    # Task 7: Generate SSH key for postgres user if it doesn't exist
    - name: Generate SSH key for postgres if not exists
      ansible.builtin.openssh_keypair:
        path: /home/postgres/.ssh/id_rsa
        type: rsa
      become_user: postgres
      when: not ssh_key_exists.stat.exists
      tags: ssh_key

    # Task 8: Copy SSH public key to all nodes (for passwordless access)
    - name: Copy SSH public key to other nodes
      ansible.builtin.shell: |
        ssh-copy-id postgres@{{ item }}
      loop:
        - "{{ primary_ip }}"
        - "{{ standby1_ip }}"
        - "{{ standby2_ip }}"
      become_user: postgres
      tags: ssh_key

    # Task 9: Install Python 3 (if needed for Ansible)
    - name: Install Python 3 on RHEL-based systems
      ansible.builtin.yum:
        name: python3
        state: present
      when: ansible_facts['distribution'] in ['CentOS', 'RedHat', 'Fedora']
      tags: python_install

    - name: Install Python 3 on Debian-based systems
      ansible.builtin.apt:
        name: python3
        state: present
      when: ansible_facts['distribution'] in ['Ubuntu', 'Debian']
      tags: python_install

    # Task 10: Run Ansible vault creation (if needed for passwords)
    - name: Create Ansible vault file for sensitive data
      ansible.builtin.command:
        cmd: "ansible-vault create /home/postgres/pg_cirrus/vault.yml"
      tags: vault_setup
