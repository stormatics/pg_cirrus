---
# setup-pgpool.yml
# This playbook configures the pgpool node on localhost.

# Configure pgpool on local host.
- name: Configure pgpool2
  hosts: localhost
  become: true
  tasks:

    # Load variables inside conf.yml file.
    - name: Load common variables
      include_vars:
        file: ../../conf.yml

    # Load variables inside vault.yml.
    - name: Load vault variables
      include_vars:
        file: ../../vault.yml

    # Install pgpool using apt.
    - name: Install pgpool2
      package:
        name: pgpool2
        state: present
      when: ansible_facts['os_family'] == 'Debian'

    - name: Install pgpool-II release RPM
      dnf:
        disable_gpg_check: True
        name: https://www.pgpool.net/yum/rpms/4.5/redhat/rhel-9-x86_64/pgpool-II-release-4.5-1.noarch.rpm
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    - name: Install pgpool-II for the specified PostgreSQL version on RHEL
      dnf:
        name: pgpool-II-pg{{ PG_VERSION }}
        state: present
      when: ansible_facts['os_family'] == 'RedHat'

    # Create pgpool_logs directory in /var/log/ .
    - name: Create pgpool_logs directory in /var/log/
      file:
        path: /var/log/pgpool_logs
        state: directory
        owner: postgres
        group: postgres
        mode: '0700'

    # Update pgpool configurations in pgpool.conf file using Ansible's lineinfile module.
    - name: Ensure pgpool.conf settings are present and not duplicated
      lineinfile:
        path: "{{ (ansible_facts['os_family'] == 'RedHat') | ternary('/etc/pgpool-II/pgpool.conf', '/etc/pgpool2/pgpool.conf') }}"
        line: "{{ item }}"
        state: present
        create: yes
      with_items:
        - "listen_addresses = '*'"  # Allow connections from any IP address.
        - "port = 9999"  # Change the default port number for pgpool to 9999.
        - "log_statement = on"  # Enable statement logging.
        - "log_per_node_statement = on"  # Enable per-node statement logging.
        - "sr_check_user = 'repuser'"  # Use 'repuser' for streaming replication checks.
        - "health_check_period = 10"  # Set health check interval to 10 seconds.
        - "health_check_user = 'repuser'"  # Use 'repuser' for health checks.
        - "{{ (ansible_facts['os_family'] == 'RedHat') | ternary(\"pool_passwd = '/etc/pgpool-II/pool_passwd'\", \"pool_passwd = '/etc/pgpool2/pool_passwd'\") }}"
        - "sr_check_password = ''"  # Leave streaming replication password blank.
        - "health_check_password = ''"  # Leave health check password blank.
        - "backend_hostname0 = '{{ hostvars['PRIMARY']['ansible_host'] }}'"
        - "backend_hostname1 = '{{ hostvars['STANDBY1']['ansible_host'] }}'"
        - "backend_port0 = {{ PG_PORT }}"
        - "backend_port1 = {{ PG_PORT }}"  # Set the port for the standby1 PostgreSQL node.
        - "backend_weight0 = 0"  # Set the weight of the primary PostgreSQL node to 0 for load balancing.
        - "backend_weight1 = 0.5"  # Set the weight of the standby1 PostgreSQL node to 0.5 for load balancing.
        - "backend_data_directory0 = '{{ INITDB_PATH }}'"  # Data directory path for primary PostgreSQL server.
        - "backend_data_directory1 = '{{ INITDB_PATH }}'"  # Data directory path for standby1 PostgreSQL server.
        - "backend_flag0 = 'ALLOW_TO_FAILOVER'"  # Set backend_flag0 to ALLOW_TO_FAILOVER.
        - "backend_flag1 = 'ALLOW_TO_FAILOVER'"  # Set backend_flag1 to ALLOW_TO_FAILOVER.
        - "failover_command = '{{ ansible_env.PWD }}/../../pgpool-internals/failover.sh %d %h %p %D %m %H %M %P %r %R %N %S {{ PG_VERSION }} {{ PG_PORT }}'"
        - "follow_primary_command = '{{ ansible_env.PWD }}/../../pgpool-internals/follow_primary.sh %d %h %p %D %m %H %M %P %r %R %N %S {{ PG_PORT }} {{ PGPOOL_IP }}'"
        - "load_balance_mode = on"  # Turn load_balance_mode to on.
        - "database_redirect_preference_list = '.*:standby'"  # Set database_redirect_preference_list value to .*:standby .
        - "statement_level_load_balance = on"  # Turn statement_level_load_balance on.
        - "pcp_listen_addresses = '*'"  # Set pcp_listen_address to * .
        - "pcp_port = 9898"  # Set pcp_port to 9898.
        - "log_destination = 'stderr,syslog'"  # Log enabled and changed to stderr,syslog.
        - "logging_collector = on"  # Logging collector turned on.
        - "log_directory = '/var/log/pgpool_logs'"  # Log directory defined.
        - "log_filename = 'pgpool-%Y-%m-%d_%H%M%S.log'"  # Log file name defined.
        - "log_file_mode = 0600"  # Log file mode changed to 0600.

    # Check if backend_hostname2 exists in pgpool.conf.
    - name: Search for existing standby2 in pgpool.conf
      shell: cat "{{ (ansible_facts['os_family'] == 'RedHat') | ternary('/etc/pgpool-II/pgpool.conf', '/etc/pgpool2/pgpool.conf') }}" | grep "backend_hostname2"
      #shell: cat /etc/pgpool2/pgpool.conf | grep "backend_hostname2"
      register: PGPOOL_CONF_CONTENT
      ignore_errors: yes
      failed_when: false

    # Configurations for standby2 PostgreSQL server are added to pgpool.conf file if they don't already exist.
    - name: Add configurations for standby2 to pgpool.conf if not already present
      lineinfile:
        path: "{{ (ansible_facts['os_family'] == 'RedHat') | ternary('/etc/pgpool-II/pgpool.conf', '/etc/pgpool2/pgpool.conf') }}"
        line: |
          backend_hostname2 = '{{ hostvars['STANDBY2']['ansible_host'] }}' # Set the hostname for the standby2 PostgreSQL node.
          backend_port2 = {{ PG_PORT }} # Set the port for standby2 PostgreSQL node.
          backend_weight2 = 0.5 # Set the weight of standby2 PostgreSQL node to 1 for load balancing.
          backend_data_directory2 = '{{ INITDB_PATH }}' # Data directory path for standby2 PostgreSQL server.
          backend_flag2 = 'ALLOW_TO_FAILOVER' # Set backend_flag2 to ALLOW_TO_FAILOVER.
        insertafter: EOF
        state: present
      when: "'backend_hostname2' not in PGPOOL_CONF_CONTENT.stdout"

    # Change owner, group and permissions of pcp.conf file.
    - name: Change permissions, owner, and group of the pcp.conf file
      file:
        path: "{{ (ansible_facts['os_family'] == 'RedHat') | ternary('/etc/pgpool-II/pcp.conf', '/etc/pgpool2/pcp.conf') }}"
        owner: postgres  # Set the owner to postgres.
        group: postgres  # Set the group to postgres.
        mode: "0600"  # Set the permissions to 0600.

    # Add postgres user and PSQL_SERVER_PASSWORD to pcp.conf file.
    - name: Add user and password to pcp.conf
      command: sh -c "echo 'postgres:'`pg_md5 {{ PSQL_SERVER_PASSWORD }}` >> {{ (ansible_facts['os_family'] == 'RedHat') | ternary('/etc/pgpool-II/pcp.conf', '/etc/pgpool2/pcp.conf') }}"

    # Create a pgpool password file in /etc/pgpool2 directory.
    - name: Create a pool_passwd file
      lineinfile:
        path: "{{ (ansible_facts['os_family'] == 'RedHat') | ternary('/etc/pgpool-II/pool_passwd', '/etc/pgpool2/pool_passwd') }}"
        line: |
          repuser:{{ REPUSER_PASSWORD }}
          postgres:{{ PSQL_SERVER_PASSWORD }}
        insertafter: EOF

    - name: Ensure PostgreSQL socket directory exists
      ansible.builtin.file:
        path: /var/run/postgresql
        state: directory
        owner: postgres
        group: postgres
        mode: '0775'
      when: ansible_facts['os_family'] == 'RedHat'

    # Stop already running pgpool2 service on localhost.
    - name: Stopping the already running pgpool2 service
      service:
        name: "{{ 'pgpool' if ansible_facts['os_family'] == 'RedHat' else 'pgpool2' }}"
        state: stopped

    # Start pgpool2 srevice on localhost.
    - name: Start pgpool2 service
      service:
        name: "{{ 'pgpool' if ansible_facts['os_family'] == 'RedHat' else 'pgpool2' }}"
        state: started
